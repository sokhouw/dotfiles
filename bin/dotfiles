#!/usr/bin/env sh

RED="\033[1;31m"
GREEN="\033[0;32m"
BLUE="\033[1;34m"
YELLOW="\033[1;33m"
RESET="\033[0;m"

uninstall_instr() {
    printf "$*\n" >> ${UNINSTALL_FILE}
}

create_link() {
    target="${1}"
    link_name="${2}"
    error=$(ln -s "${target}" "${link_name}" 2>&1)
    if [ "$?" = "0" ]; then
        uninstall_instr rm ${link_name}
        printf "${GREEN}[soft-link]${RESET} ${link_name} -> ${target}\n"
    else
        printf "${RED}[soft-link]${RESET} ${link_name} -> ${target}${RESET}: ${error}\n"
        exit 1
    fi
}

create_dir() {
    dir_name="${1}"
    remove_content="${2}"
    if [ -d "${dir_name}" ]; then
        if [ -w "${dir_name}" ]; then
            printf "${YELLOW}[directory]${RESET} \"${dir_name}\": already exists and is writeable\n"
        else
            printf "${RED}[directory]${RESET} \"${dir_name}\": already exists but it is not writeable\n"
            exit 1
        fi
    else
        if [ "${remove_content}" = "remove_content" ]; then
            uninstall_instr "rm -rf ${dir_name}"
        else
            uninstall_instr "rmdir ${dir_name}"
        fi
        error=$(mkdir "${dir_name}" 2>&1)
        if [ "$?" = "0" ]; then
            printf "${GREEN}[directory]${RESET} ${dir_name}\n"
        else
            printf "${RED}[directory]${RESET} ${dir_name}: ${error}\n"
            exit 1
        fi
    fi
}

backup_file() {
    file="${1}"
    if [ -f "${file}" ]; then
        backup="${1}.bak.$(date +'%Y%m%d%H%M%S')"
        error=$(cp --archive "${file}" "${backup}" 2>&1)
        if [ "$?" = "0" ]; then
            uninstall_instr mv -f ${backup} ${file}
            printf "${GREEN}[backup]${RESET} ${file} -> ${backup}\n"
        else
            printf "${RED}[backup]${RESET} ${file} -> ${backup}: ${error}\n"
        fi
    fi
}

clone_repo() {
    target_dir="${1}"
    repo_name="${2}"
    create_dir "${target_dir}" "remove_content"
    error=$(git clone "https://github.com/${repo_name}" "${target_dir}" 2>&1)
    if [ "$?" = "0" ]; then
        printf "${GREEN}[github.com]${RESET} cloned ${repo_name} into ${target_dir}\n"
    else
        printf "${RED}[github.com]${RESET} failed to clone ${repo_name}: ${error}\n"
        exit 1
    fi
}

modify_bashrc() {
    file="${HOME_DIR}/.bashrc"
    content="\n\n# dotfiles addition\nsource ${DOTFILES_LINK}/bashrc/bashrc.sh\n"
    backup_file ${file}
    error=$(printf "${content}" 2>&1 >> ${file})
    if [ "$?" = "0" ]; then
        printf "${GREEN}[change]${RESET} ${file}\n"
    else
        printf "${RED}[change]${RESET} ${file}: ${error}\n"
        exit 1
    fi
}

install_dotfiles() {
    # bit of a checking & egg situation
    # need to create that dir manually cause uninstall file is supposed to be in that dir
    mkdir "${XDG_STATE_DIR}/dotfiles"
    # ... thus manually adding instructions to ditch the dir and its contents
    uninstall_instr "rm -rf ${XDG_STATE_DIR}/dotfiles"
    dotfiles_dir="$(cd "$(dirname "$0")/.." && pwd)"
    create_link "${dotfiles_dir}" "${DOTFILES_LINK}"
}

install_bashrc() {
    modify_bashrc
}

install_bin() {
    # copy bin files
    create_dir "${BIN_DIR}"
    for f in $(ls -1 "${DOTFILES_LINK}/bin"); do
        create_link "${DOTFILES_LINK}/bin/${f}" "${BIN_DIR}/${f}"
    done
}

install_config_neovim() {
    # Neovim config
    create_link "${DOTFILES_LINK}/config/nvim-base" "${XDG_CONFIG_DIR}/nvim-base" 
    create_link "${DOTFILES_LINK}/config/nvim-main" "${XDG_CONFIG_DIR}/nvim-main"
}

install_config_tmux() {
    create_dir "${XDG_CONFIG_DIR}/tmux"
    create_dir "${XDG_CONFIG_DIR}/tmux/plugins"
    create_link "${DOTFILES_LINK}/config/tmux/tmux.conf" "${XDG_CONFIG_DIR}/tmux/tmux.conf"
    grep "^set -g @plugin" config/tmux/tmux.conf | cut -f4 -d' ' | sed "s/'//g" | while IFS= read -r plugin; do
        clone_repo "${XDG_CONFIG_DIR}/tmux/plugins/$(basename ${plugin})" "${plugin}"
    done
    backup_file "${HOME_DIR}/.tmux.conf"
    rm -f "${HOME_DIR}/.tmux.conf"
    create_link "${XDG_CONFIG_DIR}/tmux/tmux.conf" "${HOME_DIR}/.tmux.conf"
}

install_config_rebar3() {
    create_dir "${XDG_CONFIG_DIR}/rebar3"
    create_dir "${XDG_CONFIG_DIR}/rebar3/templates"
    for f in $(ls -1 "${DOTFILES_LINK}/config/rebar3/templates"); do
        create_link "${DOTFILES_LINK}/config/rebar3/templates/${f}" "${XDG_CONFIG_DIR}/rebar3/templates/${f}"
    done
}

install() {
    if [ -e "${XDG_STATE_DIR}/dotfiles" ]; then
        printf "${RED}[dotfiles]${RESET} already installed\n"
        exit 1
    fi

    trap on_exit_install EXIT

    printf "${BLUE}Installing dotfiles${RESET}\n"
    install_dotfiles
    printf "${BLUE}Installing bashrc${RESET}\n"
    install_bashrc
    printf "${BLUE}Installing bin files${RESET}\n"
    install_bin
    printf "${BLUE}Installing config${RESET}\n"
    install_config
    printf "${BLUE}Installing neovim config${RESET}\n"
    install_config_neovim
    printf "${BLUE}Installing tmux config${RESET}\n"
    install_config_tmux
    printf "${BLUE}Installing rebar3 config${RESET}\n"
    install_config_rebar3
}

on_exit_install() {
    result="$?"
    if [ -f "${UNINSTALL_FILE}" ]; then
        # reverse the order of uninstall instructions
        sed -i '1!G;h;$!d' ${UNINSTALL_FILE} 
        if [ "${result}" != 0 ]; then
            run_uninstall_instr
        fi
    fi
}

uninstall() {
    if [ ! -f "${UNINSTALL_FILE}" ]; then
        printf "${RED}[dotfiles]${RESET} not installed\n"
        exit 1
    fi
    run_uninstall_instr
}

run_uninstall_instr() {
    cat "${UNINSTALL_FILE}" | while IFS= read -r cmd; do
        printf "${GREEN}[uninstall]${RESET} ${cmd}\n"
        sh -c "${cmd}"
        if [ "$?" != "0" ]; then
            printf "${RED}[uninstall]${RESET} failed to run last command\n"
            exit 1
        fi
    done
}

prepare_variables() {
    HOME_DIR="${1}"
    DOTFILES_LINK="${HOME_DIR}/.dotfiles"
    BIN_DIR="${HOME_DIR}/bin"
    XDG_CONFIG_DIR="${HOME_DIR}/.config"
    XDG_STATE_DIR="${HOME_DIR}/.local/state"
    UNINSTALL_FILE=${XDG_STATE_DIR}/dotfiles/uninstall
}

case "${1}" in
    install)
        prepare_variables "${HOME}"
        trap on_exit_install EXIT
        install
        shift 1
        ;;
    uninstall)
        prepare_variables "${HOME}"
        uninstall
        shift 1
        ;;
    testinstall)
        prepare_variables "/tmp/dotfiles"
        if [ ! -d "${HOME_DIR}" ]; then
            echo "homedir [${HOME_DIR}]"
            mkdir ${HOME_DIR}
            mkdir -p ${HOME_DIR}/.config
            mkdir -p ${HOME_DIR}/.local/state
            echo 33333
            echo "# line 1\n# line 2\n" > ${HOME_DIR}/.bashrc
        fi
        trap on_exit_install EXIT
        install
        shift 1
        ;;

    testuninstall)
        prepare_variables "/tmp/dotfiles"
        uninstall
        shift 1
        ;;
    *)
        printf "${RED}[arguments]${RESET} use dotfiles install|uninstall|testinstall|testuninstall\n"
        exit 1
        ;;
esac
